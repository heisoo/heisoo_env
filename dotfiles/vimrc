if !empty(glob("~/.vim/bundles.vim"))
    source  ~/.vim/bundles.vim
elseif !empty(glob("/usr/local/vim/bundles.vim"))
    source /usr/local/vim/bundles.vim
endif
"filetype plugin indent on

" Platform

"filetype plugin indent on
" Platform
"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式
filetype indent on
"允许插件
filetype plugin on
"启动自动补全
filetype plugin indent on

set autoread          " 文件修改之后自动载入。

"{{{ /* backup undo swap setting */
if !isdirectory($HOME."/.vim/backups")
    call mkdir($HOME."/.vim/backups", "p")
endif
set backupdir=~/.vim/backups
set backup
set dir=~/.vim/backups

if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "p")
endif
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/undo
    set undolevels=1000                " How many undos
    set undoreload=10000             " Number of lines to save for undo
endif
set noswapfile
"  if !isdirectory($HOME."/.vim/swap")
"      call mkdir($HOME."/.vim/swap", "p")
"  endif
"  set directory=~/.vim/swap/


"}}} backup undo swap setting


set t_Co=256                                                      " Explicitly tell vim that the terminal has 256 colors "
set laststatus=2   " Always show the statusline
set ambiwidth=single
set clipboard=unnamed
set expandtab
" 行间距
set linespace=4
" 显示行号
set number
" 用 <> 调整缩进的长度
set shiftwidth=4
" tab 符的长度
set tabstop=4
set softtabstop=4

" 行号栏的宽度 "
set numberwidth=4
" 禁止自动换行
set nowrap
set wildmenu
set wildmode=longest:full,full
" set wildignore+=*.orig,*.pyc
" 分割窗口时 保持相等的宽/高
set equalalways
" 匹配括号的规则，增加了针对HTML的<>
set matchpairs=(:),{:},[:],<:>
" 退格、空格、上下箭头 遇到 行首 行尾 时 自动移动下一行(包括insert模式)
set whichwrap=b,s,<,>,[,]
set foldmethod=marker
set diffopt+=iwhite,vertical " 忽略缩进的差异
set tags=~/.vim/tags
:set shortmess=a

""""""""""""""""""""""""""""""""""""""""
" vim  UI
""""""""""""""""""""""""""""""""""""""""

"" color scheme
" http://fideloper.com/mac-vim-tmux
"
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if has("gui_running") || has("gui_macvim")
	colorscheme obsidian2
	let g:colors_name="obsidian2"
else
"	colorscheme molokai

    let g:solarized_termcolors=256
    syntax enable
    set background=dark
    colorscheme solarized

endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype and syntax
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:javascript_enable_domhtmlcss=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MacVim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has("gui_macvim")	" 取消默认的快捷键
	let macvim_skip_cmd_opt_movement = 1
	let macvim_hig_shift_movement = 1
	" 设置背影透明度
	set transparency=9
	" 隐藏工具栏
	set guioptions-=T

endif
" autocmd
" autocmd! bufwritepost .vimrc source ~/.vimrc
" autocmd! VimEnter *  :silent !~/.vim/phpctags -R *




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugin setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NREDTree setting

" eighties
let g:eighties_enabled = 1
let g:eidthies_minimum_width = 80
let g:eighties_extra_width = 0
let g:eighties_compute = 1
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
let NERDTreeWinSize=35
let NERDTreeChDirMode=2
let NERDChristmasTree=0


" Syntastic
let g:syntastic_javascript_checkers = ['jshint']
let g:loaded_html_syntax_checked = 1
let g:syntastic_auto_loc_list=0

" tasklist

" tagbar
" #todo
let g:tagbar_width = 20
let g:tagbar_singleclick = 1
let g:tagbar_iconchars = ['▾', '▸']
if filereadable(glob("/usr/local/bin/ctags"))
    let g:tagbar_ctags_bin='/usr/local/bin/ctags'
elseif filereadable(glob("/usr/bin/ctags"))
    let g:tagbar_ctags_bin='/usr/bin/ctags'
endif


" session
let g:session_autoload = 'no'
nnoremap <leader>ss :SaveSession
nnoremap <leader>so :OpenSession
nnoremap <leader>sd :DeleteSession
nnoremap <leader>sc :CloseSession<cr>
nnoremap <leader>sv :ViewSession<cr>

"{{{ ctrl-p MRU + ctrlp
let g:ctrlp_working_path_mode='' " .git/ .hg/ .svn/ .bzr/ _darcs/ or your own marker_dir/ marker_file
let g:ctrlp_cmd = ':CtrlP ~/src'
let g:ctrlp_map = '<c-{>'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe" Windows
let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_custom_ignore = '\v[\/]\.(DS_Storegit|hg|svn|optimized|compiled|node_modules|cache|autojump)$'
let g:Powerline_symbols = 'compatible'
let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_dont_split = 'NERD_tree_2'
let g:NERDTreeWinPos = "right"
if executable('ag')
    " Use Ag over Grep
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
                \ --ignore .git
                \ --ignore .svn
                \ --ignore .hg
                \ --ignore tags
                \ --ignore .ssh
                \ --ignore .autojump
                \ --ignore .cache
                \ --ignore .composer
                \ --ignore .vim
                \ --ignore .DS_Store
                \ --ignore .oh-my-zsh
                \ --ignore "**/*.pyc"
                \ -g ""'

endif
" }}}
"let g:ctrlp_user_command = 'find %s -type f | grep -v "`cat .ctrlpignore`"'

" UltiSnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"



" html5
let g:html5_complete = 0
let g:html5_rdfa_attributes_complete = 0
let g:html5_microdata_attributes_complete = 0
let g:html5_aria_attributes_complete = 0
let g:aria_attributes_complete = 0






"xnoremap p pgvy

" {{{ phpctags -------- !!!
let g:tagbar_phpctags_bin='~/.vim/phpctags'
let g:tagbar_phpctags_memory_limit = '512M'
" neosnippet Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-k>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
" }}} ----------------------------


" -----------------  Ag search ----
let g:ackprg = 'ag --nogroup --nocolor --column --ignore-dir="*tag"'








"{{{ ----------------- neocomplete start----
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"}}} ----------------- neocomplete end  ----

"{{{  vim paste problem
" https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
" for tmux to automatically set paste and nopaste mode at the time pasting (as
" happens in VIM UI)
" copy paste prevent problem




function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

"}}}  vim paste problem



"{{{ 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
"}}}

"/*{{{  heisoo push cmd */
"sync file funciton
function! g:Sync(arg)

    if g:MyTargetFilePath == ''
        echoerr 'Nothing can be sync!'
        return
    endif

    silent !clear
    silent w
    let s:from = expand('%:p')

    if a:arg == 'file'
        let s:cmd = 'hs_sync -file '. s:from
        echo s:cmd
    endif

    if a:arg == 'all'
        let s:cmd = 'hs_sync -all '. s:from
        echo s:cmd
    endif
    "execute ":ConqueTermTab ". s:cmd
    call VimuxRunCommand(s:cmd)
    execute ":redraw!"
    set background=dark
    colorscheme solarized


    "system(s:cmd)
endfunction


fun! s:PraeceptumTacet(cmd)
    silent let f = systemlist(a:cmd)
    if v:shell_error
        echohl Error
        echom "ERROR #" . v:shell_error
        echohl WarningMsg
        for e in f
            echom e
        endfor
        echohl None
    endif
endfunc

command! -nargs=+ PT call s:PraeceptumTacet(<q-args>)


function! CtrlPro()

    let s:from = expand('%:p:h')
    if !empty(glob("/usr/local/vim/hs_path.phar"))
        let s:cmd = '/usr/local/vim/hs_path.phar '. s:from
    elseif !empty(glob("~/.vim/hs_path.phar"))
        let s:cmd = '~/.vim/hs_path.phar '. s:from
    endif
    let s:out = system(s:cmd)
    let g:ctrlp_cmd = ':CtrlP '.s:out
    execute g:ctrlp_cmd
endfunction
"/*}}}*/



" ========= Commands ========

let g:netrw_liststyle=3 " Show nested tree mode when viewing directories

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif


" {{{  ----------    command  remap ---------------------


" Language support
autocmd FileType javascript setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4 textwidth=80
autocmd FileType css setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2


" filetype
autocmd BufNewFile,BufRead jquery.*.js set ft=javascript syntax=jquery
autocmd BufNewFile,BufRead *.md setlocal ft=markdown
autocmd BufNewFile,BufRead *.scss set ft=scss


function! Gs()
    execute ':Gwrite'
    execute ':Gstatus'
endfunction


function! NT()
    execute ':NERDTreeToggle'
    set relativenumber number
    au FocusLost * :set norelativenumber number
    au FocusGained * :set relativenumber
endfunction
autocmd! bufwritepost * execute ":StripWhitespace"
if(expand('%:p') == $HOME.'/.vimrc')
    autocmd! bufwritepost .vimrc source ~/.vimrc " vimrc文件修改之后自动加载。 linux。"
endif
if(expand('%:p') == $HOME.'/.vim/bundles.vim')
    autocmd! bufwritepost ~/.vim/bundles.vim source ~/.vimrc " vimrc文件修改之后自动加载。 linux。"
endif

" }}}  ----------    command  remap ---------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <right>
cnoremap <C-b> <left>
noremap <silent><leader>/ :nohls<CR>
nnoremap U <C-r>

" Yank text to the OS X clipboard" 将文本复制到OS X剪贴板中
noremap <leader>p :set paste<CR>:put *<CR>:set nopaste<CR>
" noremap <leader>y "*y
" noremap <leader>yy "*Y
let mapleader = "\<Space>"
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
nmap <c-p> :call CtrlPro()<cr>
map <silent> <leader>evi :e ~/.vimrc<cr>
map <leader>q :wq<cr>
nnoremap <leader>w :w<CR>
"nmap <silent><leader>r :!pbpaste <cr>
nmap <silent><leader>f :call g:Sync('file')<cr>
nmap <silent><leader>a :call g:Sync('all') <cr>
nmap <silent><leader>x :VimuxCloseRunner <cr>
nnoremap <Leader>p :CtrlPMRU<CR>
nnoremap <leader>dump :TagbarToggle<CR>
inoremap jj <ESC>
"----------------- NERD tree setting
nmap <silent> <leader>ls :call NT()<CR>
nnoremap <silent><Leader>nu :call NumberToggle()<cr>
nnoremap <leader>v V`}
nmap <silent><leader>gs :call Gs()<cr>
noremap <leader>h :GundoToggle<CR>


" autocmd! VimEnter *  :silent !~/.vim/phpctags -R *

